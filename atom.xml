<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://marsleoguo.github.io</id>
    <title>希言</title>
    <updated>2020-05-03T06:21:34.008Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://marsleoguo.github.io"/>
    <link rel="self" href="https://marsleoguo.github.io/atom.xml"/>
    <subtitle>希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。</subtitle>
    <logo>https://marsleoguo.github.io/images/avatar.png</logo>
    <icon>https://marsleoguo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 希言</rights>
    <entry>
        <title type="html"><![CDATA[MAC github加速]]></title>
        <id>https://marsleoguo.github.io/post/MAC github加速/</id>
        <link href="https://marsleoguo.github.io/post/MAC github加速/">
        </link>
        <updated>2020-05-03T02:35:24.000Z</updated>
        <content type="html"><![CDATA[<ol start="2">
<li>
<ol>
<li>登录地址：<a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a></li>
</ol>
</li>
<li>
<p>查询：<code>github.com</code> <code>github.global.ssl.fastly.net</code></p>
</li>
<li>
<p>编辑host文件：</p>
<pre><code class="language-shell">192.30.253.112 github.com
192.30.253.113 github.com
151.101.185.194 github.global.ssl.fastly.net
</code></pre>
</li>
<li>
<p>mac下清理dns缓存的命令</p>
</li>
</ol>
<pre><code class="language-shell">sudo dscacheutil -flushcache
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[centos相关]]></title>
        <id>https://marsleoguo.github.io/post/centos-xiang-guan/</id>
        <link href="https://marsleoguo.github.io/post/centos-xiang-guan/">
        </link>
        <updated>2020-05-03T02:14:15.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h4 id="查看ip地址">查看<code>ip</code>地址</h4>
<pre><code>ifconfig
</code></pre>
<h4 id="修改centos语言为中文">修改<code>centos</code>语言为中文</h4>
<ul>
<li>第一步: <code>vim /etc/profile</code></li>
<li>第二步：在文件的末尾添加<code>export LANG=zh_CN.GB2312</code></li>
<li>第三步：wq保存。</li>
<li>第四步：刷新<code>profile</code>文件。<code>source /etc/profile</code></li>
</ul>
<h4 id="jdk安装"><code>JDK</code>安装</h4>
<ul>
<li>
<p>第一步：在<code>/usr/local/</code>下创建文件夹<code>soft resource</code>。代码如下：</p>
<pre><code>1.cd /usr/local/ --进入local文件夹下

2.mkdir soft resource --创建文件夹
</code></pre>
</li>
<li>
<p>第二步：通过xftp将<code>JDK</code>安装文件放入到<code>/usr/local/src/soft resource/</code>下</p>
</li>
<li>
<p>第三步：解压<code>JDK</code>gz文件</p>
<pre><code>1.cd /usr/local/src/soft resource/ -- 进入soft resource文件夹
2.tar -zvxf /usr/local/src/jdk-7u71-linux-x64.tar.gz -- 解压jdk的安装文件
</code></pre>
</li>
<li>
<p>第四步：在<code>/usr/</code> 下创建<code>java</code>文件夹</p>
<pre><code>mkdir /usr/java
</code></pre>
</li>
<li>
<p>第五步：剪切<code>jdk</code>解压后的文件到<code>java</code>文件夹下并且命名为<code>java</code></p>
<pre><code>mv jdk1.7.0_71 /usr/java/jdk;
</code></pre>
</li>
<li>
<p>第六步：配置jdk的环境变量</p>
<pre><code>1.vim /etc/profile
2.在文件的末尾添加：
export JAVA_HOME=/usr/java/jdk
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</code></pre>
</li>
</ul>
<blockquote>
<p>注意：不要忘记<code>PATH</code>后边的<code>:$PATH</code>那个代表系统变量的<code>path</code></p>
</blockquote>
<ul>
<li>第七步：让修改生效: 执行<code>source /etc/profile</code></li>
</ul>
<h4 id="mysql安装"><code>MySql</code>安装</h4>
<ul>
<li>
<ol>
<li>
<p>在<code>/usr/local/</code>下创建文件夹<code>soft resource</code>。代码如下：</p>
<pre><code>1.cd /usr/local/ --进入local文件夹下

2.mkdir soft resource --创建文件夹
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="2">
<li>通过xftp将<code>MySql</code>安装文件放入到<code>/usr/local/src/soft resource/</code>下</li>
</ol>
</li>
<li>
<ol start="3">
<li>
<p>解压<code>MySql</code>gz文件</p>
<pre><code>1.cd /usr/local/src/soft resource/ -- 进入soft resource文件夹
2.tar -zvxf mysql-5.6.34-linux-glibc2.5-x86_64.tar.gz -- 解压MySql的安装文件
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="4">
<li>
<p>剪切<code>MySql</code>解压后的文件到<code>mysql</code>文件夹下 并且配置Path路径</p>
<pre><code>1.mv mysql-5.6.34-linux-glibc2.5-x86_64 /usr/local/mysql/
2.vim /etc/profile
3.添加export MYSQL_HOME=/usr/local/mysql
4.path路径添加home路径：export PATH=:$MYSQL_HOME/bin
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="5">
<li>
<p>创建一个新的工作组</p>
<pre><code>groupadd mysql;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="6">
<li>
<p>创建系统账户并将它指向给新创建的工作组</p>
<pre><code>useradd -r -g mysql mysql;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="7">
<li>
<p>进入<code>mysql</code>文件夹</p>
<pre><code>cd /usr/local/mysql
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="8">
<li>
<p>修改当前文件夹的属组为<code>mysql</code></p>
<pre><code>chown -R mysql:mysql ./;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="9">
<li>
<p>执行以下语句：</p>
<pre><code>./scripts/mysql_install_db --user=mysql;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="10">
<li>修改当前文件夹的属组为<code>root</code></li>
</ol>
<pre><code>chown -R root:root ./;
</code></pre>
</li>
<li>
<ol start="11">
<li>
<p>修改data文件夹的属组为'mysql</p>
<pre><code>chown -R mysql:mysql ./data;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="12">
<li>将<code>mysql</code>的服务放入到系统服务文件夹<code>（init.d）</code></li>
</ol>
</li>
</ul>
<pre><code>\cp support-files/mysql.server /etc/init.d/mysql;
</code></pre>
<ul>
<li>
<ol start="13">
<li>
<p>启动<code>mysql</code>服务</p>
<pre><code>service mysql start;

</code></pre>
</li>
</ol>
</li>
<li>
<ol start="14">
<li>
<p>修改服务文件夹下 mysql文件的权限</p>
<pre><code>chmod +x /etc/init.d/mysql;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="15">
<li>创建符号链接</li>
</ol>
</li>
</ul>
<pre><code>\ln -s /usr/local/mysql/bin/mysql /usr/bin;
</code></pre>
<ul>
<li>
<ol start="16">
<li>登录<code>mysql</code>设置<code>root</code>密码</li>
</ol>
</li>
</ul>
<pre><code>1.mysql -h 127.0.0.1 -u root -p
2.回车
3.password提示，然后再回车。
4.设置密码：mysql&gt; set password for root@localhost = password('123');
</code></pre>
<h4 id="tomcat安装"><code>tomcat</code>安装</h4>
<ul>
<li>
<ol>
<li>
<p>在<code>/usr/local/</code>下创建文件夹<code>soft resource</code>。代码如下：</p>
<pre><code>1.cd /usr/local/ --进入local文件夹下

2.mkdir soft resource --创建文件夹
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="2">
<li>通过xftp将<code>MySql</code>安装文件放入到<code>/usr/local/src/soft resource/</code>下</li>
</ol>
</li>
<li>
<ol start="3">
<li>
<p>解压tomcat文件</p>
<pre><code>tar -zvxf /usr/local/src/apache-tomcat-7.0.69.tar.gz;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="4">
<li>
<p>剪切解压缩后的文件到<code>/user/local/tomcat</code>下</p>
<pre><code>mv /usr/local/src/apache-tomcat-7.0.69 /usr/local/tomcat;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="5">
<li>
<p>设置<code>tomcat</code>的运行内存等：</p>
<pre><code>1.vim /usr/local/tomcat/bin/catalina.sh
2.在第一行添加:JAVA_OPTS='-Xms512m -Xmx2048m -XX:PermSize=256M -XX:MaxNewSize=512m -XX:MaxPermSize=2048m'
3.chmod +x /usr/local/tomcat/bin/catalina.sh;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="6">
<li>
<p>设置<code>tomcat</code>的字符集：</p>
<pre><code>1.vim /usr/local/tomcat/conf/server.xml
2.在端口号为&quot; &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;&quot;处添加：URIEncoding=&quot;utf-8&quot;
</code></pre>
</li>
</ol>
</li>
<li>
<ol start="7">
<li>设置<code>/etc/profile</code>文件</li>
</ol>
</li>
</ul>
<pre><code>1.export CATALINA_HOME=/usr/local/tomcat
2.export PATH=$CATALINA_HOME/bin
3.export CLASSPATH=$CATALINA_HOME/lib/servlet-api.jar
</code></pre>
<h4 id="关闭防火墙">关闭防火墙</h4>
<pre><code>service iptables stop;-- 停止防火墙
chkconfig iptables off;-- 开机启动的时候停止防火墙
</code></pre>
<h4 id="多端口的问题">多端口的问题</h4>
<h4 id="出现command-not-found的解决办法">出现<code>command not found</code>的解决办法。</h4>
<p>执行以下代码：</p>
<pre><code>export
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
</code></pre>
<h4 id="创建一个新的工作组-_groupadd">创建一个新的工作组 _<code>groupadd</code></h4>
<pre><code>groupadd mysql;
</code></pre>
<h4 id="创建一个新的系统用户_useradd">创建一个新的系统用户_<code>useradd</code></h4>
<pre><code>useradd -r -g mysql mysql;

</code></pre>
<p><code>-r</code>:建立系统帐号；</p>
<p><code>-g&lt;群组&gt;</code>：指定用户所属的群组；</p>
<h4 id="chown用法">chown用法</h4>
<p><strong>用途：</strong> 用来更改某个目录或文件的用户名和用户组的</p>
<p><strong>用法：</strong> <code>chown 用户名:组名 文件路径</code>（可以是就对路径也可以是相对路径）</p>
<p><strong>例如：</strong></p>
<pre><code>chown root:root /tmp/tmp1
</code></pre>
<blockquote>
<p>就是把tmp下的tmp1的用户名和用户组改成root和root（只修改了tmp1的属组）.</p>
</blockquote>
<h4 id="centos-定时任务">centos 定时任务</h4>
<table>
<thead>
<tr>
<th>语法</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>service crond start</code></td>
<td>启动服务</td>
</tr>
<tr>
<td><code>service crond stop</code></td>
<td>关闭服务</td>
</tr>
<tr>
<td><code>service crond restart</code></td>
<td>重启服务</td>
</tr>
<tr>
<td><code>service crond reload</code></td>
<td>重新载入配置</td>
</tr>
<tr>
<td><code>crontab -l</code></td>
<td>查看定时任务</td>
</tr>
<tr>
<td><code>crontab -e</code></td>
<td>编辑定时任务</td>
</tr>
</tbody>
</table>
<p><strong>例子：</strong></p>
<pre><code class="language-shell">56 22 3 jul * rm -rf /root/test
</code></pre>
<h5 id="cron文件语法">cron文件语法:</h5>
<table>
<thead>
<tr>
<th>分</th>
<th>小时</th>
<th>日</th>
<th>月</th>
<th>星期</th>
<th>命令</th>
</tr>
</thead>
<tbody>
<tr>
<td>0-59</td>
<td>0-23</td>
<td>1-31</td>
<td>1-12</td>
<td>0-6</td>
<td>sh脚本</td>
</tr>
</tbody>
</table>
<h5 id="特殊字符">特殊字符</h5>
<ul>
<li><code>*</code>代表取值范围内的数字</li>
<li><code>/</code>代表”每”</li>
<li><code>-</code>代表从某个数字到某个数字</li>
<li><code>,</code>分开几个离散的数字</li>
</ul>
<p>例如： <code>*/15 * * * * sh /root/test1.sh</code>             指定每天的 5:30 执行ls命令</p>
<h4 id="目录的绑定与解除绑定">目录的绑定与解除绑定</h4>
<p><strong>绑定：</strong></p>
<pre><code>mount --bind 老目录  新目录
</code></pre>
<p>解除绑定：</p>
<pre><code>mount --move 老目录 新目录
</code></pre>
<blockquote>
<p>解绑是绑定的一个反过程所以要调过来。</p>
</blockquote>
<h4 id="设置目录永久关联">设置目录永久关联</h4>
<pre><code>sed -i &quot;/proc/a\\\n/home/mnt/resource    /usr/local/tomcat/webapps/core/resource   none   rw,bind  0 0&quot; /etc/fstab;
</code></pre>
<h4 id="设置开机启动">设置开机启动</h4>
<pre><code>vim /etc/rc.d/rc.local
</code></pre>
<blockquote>
<p>想要启动什么在这个文件里添加就行。</p>
</blockquote>
<h4 id="ftp的安装">ftp的安装</h4>
<h5 id="安装">安装</h5>
<h5 id="配置自启动">配置自启动</h5>
<h5 id="查看管理ftp服务">查看管理ftp服务</h5>
<h5 id="修改配置文件">修改配置文件</h5>
<h5 id="常见错误处理">常见错误处理</h5>
<h4 id="mysql账户授权为可远程访问用户">mysql账户授权为可远程访问用户</h4>
<ol>
<li>使用命令行登陆<code>mysql</code>:</li>
</ol>
<pre><code>mysql -uroot -p'123456'
</code></pre>
<ol start="2">
<li>选择<code>mysql</code>数据库实例。</li>
</ol>
<pre><code>use mysql;
</code></pre>
<ol start="3">
<li>给<code>root</code>用户授权可远程访问权限。</li>
</ol>
<pre><code>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
</code></pre>
<ol start="4">
<li>刷新权限。</li>
</ol>
<pre><code>FLUSH PRIVILEGES;
</code></pre>
<ol start="5">
<li>利用数据库DBMS尝试一下是否成功。</li>
<li>退出数据库。</li>
</ol>
<pre><code>quit;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[色彩搭配速成！3个实用方法帮你全面搞定配色]]></title>
        <id>https://marsleoguo.github.io/post/色彩搭配速成！3个实用方法帮你全面搞定配色/</id>
        <link href="https://marsleoguo.github.io/post/色彩搭配速成！3个实用方法帮你全面搞定配色/">
        </link>
        <updated>2019-04-15T03:29:00.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>编者按：最值得收藏的色彩设计方法！色彩搭配是一门花样繁多的学问，但任天下奇招再多，独孤九剑总有破法，今天阿里的同学这篇色彩设计方法，仅有简单3大类，但囊括了众多顶尖的配色技巧，不可多得的集大成篇，别错过咯。</p>
<p>为什么要整理设计色彩方法？</p>
<p>在色彩设计应用中，我们对颜色不同程度的理解，影响到设计页面的表现，熟练地运用色彩搭配，设计时岂不事半功倍。一张优秀的设计作品，它的色彩搭配必定和谐得体，令人赏心悦目，反思我们在设计过程中，怎样的色彩搭配更容易达到设计目的，又是什么影响了我们的配色思维呢？</p>
<p>以下几点常会影响色彩搭配思维：</p>
<ol>
<li>
<p>仅关注色彩表象</p>
</li>
<li>
<p>搭配方法不够系统</p>
</li>
<li>
<p>色彩与构成掌握不到位</p>
</li>
</ol>
<p>首先，我们简单理解一下色相和色调概念：</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415112953.png" alt="" loading="lazy"></figure>
<!-- more -->
<p>接下来我们按三个大类的配色方法，结合一些案例，分析色彩在页面中的应用手法。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113025.png" alt="" loading="lazy"></figure>
<h4 id="一-色相差而形成的配色方式"><strong>一、色相差而形成的配色方式</strong></h4>
<h5 id="11-有主导色彩配色"><strong>1.1 有主导色彩配色</strong></h5>
<p>这是由一种色相构成的统一性配色。即由某一种色相支配、统一画面的配色，如果不是同一种色相，色环上相邻的类似色也可以形成相近的配色效果。当然，也有一些色相差距较大的做法，比如撞色的对比，或者有无色彩的对比，但这里先讲述带主导色的配色案例。</p>
<p>根据主色与辅色之间的色相差不同，可以分为以下各种类型：</p>
<p>1.1-1  同色系主导</p>
<p>1.1-2  邻近色主导</p>
<p>1.1-3  类似色主导</p>
<p>1.1-4  中差色主导</p>
<p>1.1-5  对比色主导</p>
<p>1.1-6  中性色主导</p>
<p>1.1-7  多色搭配下的主导</p>
<p>…</p>
<h6 id="11-1-同色系配色"><strong>1.1-1 同色系配色</strong></h6>
<p>同色系配色是指主色和辅色都在统一色相上，这种配色方法往往会给人页面很一致化的感受。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113130.png" alt="" loading="lazy"></figure>
<p>twitter的案例</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113156.png" alt="" loading="lazy"></figure>
<p>整体蓝色设计带来统一印象，颜色的深浅分别承载不同类型的内容信息，比如信息内容模块，白色底代表用户内容，浅蓝色底代表回复内容，更深一点的蓝色底代表可回复操作，颜色主导着信息层次，也保持了twitter的品牌形象。</p>
<p>观点：颜色差分割页面层次和模块，并代表不同功能任务属性。</p>
<p>多有范儿的色带，想自己来一个吗？看教程！<a href="http://www.uisdc.com/use-picture-create-swatches">《配色弱有救了！教你利用图片创建独有的色彩方案！》</a></p>
<h6 id="11-2-邻近色配色"><strong>1.1-2 邻近色配色</strong></h6>
<p>近邻色配色方法比较常见，搭配比同色系稍微丰富，色相柔和过渡看起来也很和谐。</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113251.png" alt="" loading="lazy"></figure>
<p>ALIDP的案例</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113353.png" alt="" loading="lazy"></figure>
<p>纯度高的色彩，基本用于组控件和文本标题颜色，各控件采用邻近色使页面不那么单调，再把色彩饱和度降低用于不同背景色和模块划分。</p>
<p>观点：基于品牌色的邻近色运用，灵活运用到各类控件中。</p>
<h6 id="11-3-类似色配色"><strong>1.1-3 类似色配色</strong></h6>
<p>类似色配色也是常用的配色方法，对比不强给人色感平静、调和的感觉。</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113425.png" alt="" loading="lazy"></figure>
<p>BENMAPT的案例</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113506.png" alt="" loading="lazy"></figure>
<p>红黄双色主导页面，色彩基本用于不同组控件表现，红色用于导航控件、按钮和图标，同时也作辅助元素的主色。利用偏橙的黄色代替品牌色，用于内容标签和背景搭配。</p>
<p>观点：基于品牌色的类似色运用，有主次地用到页面各类控件和主体内容中。</p>
<p>想用红色玩出花样？来看顶尖设计师的杰作！<a href="http://www.uisdc.com/red-color-website-design">《洒一腔热血！35个热烈奔放的红色色调网站设计》</a></p>
<h6 id="11-4-中差色配色"><strong>1.1-4 中差色配色</strong></h6>
<p>中差色对比相对突出，色彩对比明快，容易呈现饱和度高的色彩。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113520.png" alt="" loading="lazy"></figure>
<p>facebook的案例</p>
<figure data-type="image" tabindex="10"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113614.png" alt="" loading="lazy"></figure>
<p>颜色深浅营造空间感，也辅助了内容模块层次之分，统一的深蓝色系运用，传播品牌形象。中间色绿色按钮起到丰富页面色彩的作用，同时也突出绿色按钮任务层级为最高。深蓝色吊顶导航打通整站路径，并有引导用户向下阅读之意。</p>
<p>观点：利用色彩对比突出按钮任务优先级，增加页面气氛。</p>
<h6 id="11-5-对比色配色"><strong>1.1-5 对比色配色</strong></h6>
<p>主导的对比配色需要精准地控制色彩搭配和面积，其中主导色会带动页面气氛，产生激烈的心理感受。</p>
<figure data-type="image" tabindex="11"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113744.png" alt="" loading="lazy"></figure>
<p>YouTube的案例</p>
<figure data-type="image" tabindex="12"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113809.png" alt="" loading="lazy"></figure>
<p>红色的热闹体现内容的丰富多彩，品牌红色赋予组控件色彩和可操作任务，贯穿整个站点的可操作提示，又能体现品牌形象。红色多代表导航指引和类目分类，蓝色代表登录按钮、默认用户头像和标题，展示用户所产生的内容信息。</p>
<p>观点：红蓝色反应不同交互和信息的可操作性，针对系统操作和用户操作的区分。</p>
<h6 id="11-6-中性色配色"><strong>1.1-6 中性色配色</strong></h6>
<p>用一些中性的色彩作为基调搭配，常应用在信息量大的网站，突出内容，不会受不必要的色彩干扰。这种过配色比较通用，非常经典。</p>
<figure data-type="image" tabindex="13"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113859.png" alt="" loading="lazy"></figure>
<p>Bechan的案例</p>
<figure data-type="image" tabindex="14"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113934.png" alt="" loading="lazy"></figure>
<p>黑色突出网站导航和内容模块的区分，品牌蓝色主要用于可点击的操作控件，包括用户名称、内容标题。相较于大片使用品牌色的手法，更能突出内容和信息，适合以内容为王的通用化、平台类站点。</p>
<p>观点：利用大面积中性色作为主导色，品牌色在这里起到画龙点睛的作用，用于一些需要重点突出的场景，强调交互的状态等。</p>
<h6 id="11-7-多色搭配下的主导"><strong>1.1-7 多色搭配下的主导</strong></h6>
<p>主色和其他搭配色之间的关系会更丰富，可能有类似色、中差色、对比色等搭配方式，但其中某种色彩会占主导。</p>
<figure data-type="image" tabindex="15"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415113947.png" alt="" loading="lazy"></figure>
<p>Google的案例</p>
<figure data-type="image" tabindex="16"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415114048.png" alt="" loading="lazy"></figure>
<p>对于具有丰富产品线的谷歌来说，通过4种品牌色按照一定的纯度比，再用无色彩黑白灰能搭配出千变万化的配色方案，让品牌极具统一感。在大部分页面，蓝色会充当主导色，其他3色作辅色并设定不同的任务属性，黑白灰多作为辅助色，对于平台类站点来说，多色主导有非常好的延展性。</p>
<p>观点：谷歌设置了四种品牌色，通过主次、合理的比例应用在界面中，并通过组控件不同的交互状态合理分配功能任务。</p>
<p>谷歌的经典色彩搭配，一直延续到各类产品中，比如这家：<a href="http://www.uisdc.com/google-designer-squared-redesign">《能过稿的LOGO！谷歌设计师如何为Squared做品牌重设计》</a></p>
<h4 id="二-色调调和而形成的配色方式"><strong>二、色调调和而形成的配色方式</strong></h4>
<h5 id="21-有主导色调配色"><strong>2.1 有主导色调配色</strong></h5>
<p>这是由同一色调构成的统一性配色。深色调和暗色调等类似色调搭配也可以形成同样的配色效果。即使出现多种色相，只要保持色调一致，画面也能呈现整体统一性。</p>
<p>根据色彩的情感，不同的调子会给人不同的感受：</p>
<p>2.1-1  清澈的色调</p>
<p>2.1-2  阴暗的色调</p>
<p>2.1-3  明亮色调</p>
<p>2.1-4  深暗色调</p>
<p>2.1-5  雅白色调</p>
<p>…</p>
<h6 id="21-1-清澈色调"><strong>2.1-1 清澈色调</strong></h6>
<figure data-type="image" tabindex="17"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415114135.png" alt="" loading="lazy"></figure>
<p>SHOTFOLIO的案例</p>
<figure data-type="image" tabindex="18"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132110.png" alt="" loading="lazy"></figure>
<p>清澈调子使页面非常和谐，即使是不同色相形同色调的配色能让页面保持较高的协调度。蓝色另页面产生安静冰冷的气氛，茶色让我们想起大地泥土的厚实，给页面增加了稳定踏实感觉，同时暖和蓝色的冰冷。</p>
<p>观点：互补的色相搭配在一起，通过统一色调的手法，可以缓和色彩之间的对比效果。</p>
<h6 id="21-2-阴暗色调"><strong>2.1-2 阴暗色调</strong></h6>
<figure data-type="image" tabindex="19"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132132.png" alt="" loading="lazy"></figure>
<p>概念应用的案例</p>
<figure data-type="image" tabindex="20"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132220.png" alt="" loading="lazy"></figure>
<p>阴暗的色调渲染场景氛围，通过不同色相的色彩变化丰富信息分类，降低色彩饱和度使各色块协调并融入场景，白色和明亮的青绿色作为信息载体呈现。</p>
<p>Tips：多色彩经过统一色调处理，区域间非常协调，也不影响整体页面阴暗气氛表现。</p>
<h6 id="21-3-明亮色调"><strong>2.1-3 明亮色调</strong></h6>
<figure data-type="image" tabindex="21"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132232.png" alt="" loading="lazy"></figure>
<p>Kids plus的案例</p>
<figure data-type="image" tabindex="22"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132308.png" alt="" loading="lazy"></figure>
<p>明亮的颜色活泼清晰，热闹的气氛和醒目的卡通形像叙述着一场庆典，但铺满高纯度的色彩，过于刺激，不适宜长时间游览。</p>
<p>观点：饱和度与纯度特性明显的搭配，在达到视觉冲击力的同时，可适当采用对比色或降低明度等方法调和视觉表现。</p>
<h6 id="21-4-深暗色调"><strong>2.1-4 深暗色调</strong></h6>
<figure data-type="image" tabindex="23"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132320.png" alt="" loading="lazy"></figure>
<p>LEES FERRY的案例</p>
<figure data-type="image" tabindex="24"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132347.png" alt="" loading="lazy"></figure>
<p>页面以深暗偏灰色调为主，不同的色彩搭配，像在叙述着不同的故事，白色文字的排版，整个页面显得厚重精致，小区域微渐变增加版面质感。</p>
<p>观点：以低暗色调构成整体画面氛围，小面积明亮部分不会影响整体感觉。</p>
<h6 id="21-5-雅白色调"><strong>2.1-5 雅白色调</strong></h6>
<figure data-type="image" tabindex="25"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132359.png" alt="" loading="lazy"></figure>
<p>Very的案例</p>
<figure data-type="image" tabindex="26"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132426.png" alt="" loading="lazy"></figure>
<p>柔和的调子使页面显得明快温暖，就算色彩很多也不会造成视觉负重。页面的同色调搭配，颜色作为不同模块的信息分类，不抢主体的重点，还能衬托不同类型载体的内容信息。</p>
<p>观点：同色调不同色彩的模块，就算承载着不同的信息内容也能表现很和谐。</p>
<h5 id="22-同色调配色"><strong>2.2 同色调配色</strong></h5>
<p>这是由同一或类似色调中的色相变化构成的配色类型，与主导色调配色中的属于同类技法。区别在于色调分布平均，没有过深或过浅的模块，色调范围更为严格。</p>
<figure data-type="image" tabindex="27"><img src="https://image.uisdc.com/wp-content/uploads/2014/12/TB1Y_KoGVXXXXcfXFXXwu0bFXXX.png" alt="img" loading="lazy"></figure>
<p>Tumblr的案例</p>
<figure data-type="image" tabindex="28"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132503.png" alt="" loading="lazy"></figure>
<p>在实际的设计运用中，常会用些更综合的手法，例如整体有主导色调，小范围布局会采用同色调搭配。拿tumblr的发布模块来说，虽然页面有自己的主色调，但小模块使用同色调不同色彩的功能按钮，结合色相变化和图形表达不同的功能点，众多的按钮放在一起，由于同色调原因模块非常稳定统一。</p>
<p>观点：综合运用的情况，整体界面是有主导色调，在布局例如重点图标等是同色调配色灵活运用。</p>
<h5 id="23-同色深浅搭配"><strong>2.3 同色深浅搭配</strong></h5>
<p>这是由同一色相的色调差构成的配色类型，属于单一色彩配色的一种。 与主导色调配色中的同色系配色属于同类技法。从理论上来讲，在同一色相下的色调不存在色相差异，而是通过不同的色调阶层搭配形成，可以理解为色调配色的一种。</p>
<figure data-type="image" tabindex="29"><img src="https://image.uisdc.com/wp-content/uploads/2014/12/TB1lq5uGVXXXXb_XpXXwu0bFXXX.png" alt="img" loading="lazy"></figure>
<p>Genrecolours的案例</p>
<figure data-type="image" tabindex="30"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132553.png" alt="" loading="lazy"></figure>
<p>拿紫色界面来说，利用同一色相通过色调深浅对比，营造页面空间层次。虽然色彩深浅搭配合理，但有些难以区分主次，由于是同一色相搭配，颜色的特性决定着心理感受。</p>
<p>观点：同色深浅配色有着极高的统一性，但有点枯燥。</p>
<h4 id="三-对比配色而形成的配色方式"><strong>三、对比配色而形成的配色方式</strong></h4>
<p>由于对比色相互对比构成的配色，可以分为互补色或相反色搭配构成的色相对比效果，由白色、黑色等明度差异构成的明度对比效果，以及由纯度差异构成的纯度对比效果。</p>
<h5 id="31-色相对比">3.1 色相对比</h5>
<p>3.1-1  双色对比</p>
<p>3.1-2 三色对比</p>
<p>3.1-3 多色对比</p>
<p>3.2 纯度对比</p>
<p>3.3 明度对比</p>
<p>….</p>
<h6 id="31-1-双色对比"><strong>3.1-1 双色对比</strong></h6>
<p>色彩间对比视觉冲击强烈，容易吸引用户注意，使用时经常大范围搭配。</p>
<figure data-type="image" tabindex="31"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132712.png" alt="" loading="lazy"></figure>
<p>VISA的案例</p>
<figure data-type="image" tabindex="32"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132726.png" alt="" loading="lazy"></figure>
<p>VISA是一个信用卡品牌，深蓝色传达和平安全的品牌形象，黄色能让用户产生兴奋幸福感。另外蓝色降低明度后再和黄色搭配，对比鲜明之余还能缓和视觉疲劳。</p>
<p>观点： 不管是整体对比还是局部对比，对比色给人强烈的视觉冲击，结合色彩心理学对品牌传达效果更佳。</p>
<h6 id="31-2-三色对比"><strong>3.1-2 三色对比</strong></h6>
<p>三色对比色相上更为丰富，通过加强色调重点突出某一种颜色，且在色彩面积更为讲究。</p>
<figure data-type="image" tabindex="33"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132736.png" alt="" loading="lazy"></figure>
<p>NAVER的案例</p>
<figure data-type="image" tabindex="34"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132748.png" alt="" loading="lazy"></figure>
<p>大面积绿色作为站点主导航，形象鲜明突出。使用品牌色对应的两种中差色作二级导航，并降低其中一方蓝色系明度，再用同色调的西瓜红作为当前位置状态，二级导航内部对比非常强烈却不影响主导航效果。</p>
<p>观点： 三色对比中西瓜红作为强调色限定在小面积展现非常关键，面积大小直接影响画面平衡感。</p>
<h6 id="31-3-多色对比"><strong>3.1-3 多色对比</strong></h6>
<p>多色对比给人丰富饱满的感觉，色彩搭配协调会使页面会非常精致，模块感强烈。</p>
<figure data-type="image" tabindex="35"><img src="https://image.uisdc.com/wp-content/uploads/2014/12/TB1L5KxGVXXXXbTXXXXwu0bFXXX.png" alt="img" loading="lazy"></figure>
<p>Metro的案例</p>
<figure data-type="image" tabindex="36"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132817.png" alt="" loading="lazy"></figure>
<p>Metro风格采用大量色彩，分隔不同的信息模块。保持大模块区域面积相等，模块内部可以细分出不同内容层级，单色模块只承载一种信息内容，配上对应功能图标识别性高。</p>
<p>观点：色彩色相对比、色彩面积对比，只要保持一定的比例关系，页面也能整整有序。</p>
<h5 id="32-纯度对比"><strong>3.2 纯度对比</strong></h5>
<p>相对与色相对比，纯度差对比，对比色彩的选择非常多，设计应用范围广泛，可用于一些突出品牌、营销类的场景。</p>
<figure data-type="image" tabindex="37"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132835.png" alt="" loading="lazy"></figure>
<p>PINTEREST的案例</p>
<figure data-type="image" tabindex="38"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132848.png" alt="" loading="lazy"></figure>
<p>页面中心登录模块，通过降低纯度处理制造无色相背景，再利用红色按钮的对比，形成纯度差关系。与色相对比相较，纯色对比冲突感刺激感相对小一些，非常容易突出主体内容的真实性。</p>
<p>观点： 运用对比重要的是对比例的把握，面积、构图、节奏、颜色、位置等一切可以发生变化的元素，形成视觉的强烈冲突。</p>
<h5 id="33-明度对比"><strong>3.3 明度对比</strong></h5>
<p>明度对比接近生活实际反映，通过环境远近、日照角度等明暗关系，设计趋于真实。</p>
<figure data-type="image" tabindex="39"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132901.png" alt="" loading="lazy"></figure>
<p>ARKTIS的案例</p>
<figure data-type="image" tabindex="40"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190415132913.png" alt="" loading="lazy"></figure>
<p>明度对比够构成画面的空间纵深层次，呈现远近的对比关系，高明度突出近景主体内容，低明度表现远景的距离。而明度差使人注意力集中在高亮区域，呈现出药瓶的真实写照。</p>
<p>观点： 明度对比使页面显得更单纯、统一，而高低明度差可产生距离关系。</p>
<h4 id="总结"><strong>总结：</strong></h4>
<p>色彩是最能引起心境共鸣和情绪认知的元素，三原色能调配出非常丰富的色彩，色彩搭配更是千变万化。设计配色时，我们可以摒弃一些传统的默认样式，了解设计背后的需求目的，思考色彩对页面场景表现、情感传达等作用，从而有依据、有条理、有方法地构建色彩搭配方案。</p>
<p><strong>参考：</strong></p>
<p><a href="https://www.uisdc.com/3-color-matching-skills">色彩搭配速成！3个实用方法帮你全面搞定配色</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[spring boot 热部署devtools实现]]></title>
        <id>https://marsleoguo.github.io/post/spring-boot-热部署devtools实现/</id>
        <link href="https://marsleoguo.github.io/post/spring-boot-热部署devtools实现/">
        </link>
        <updated>2019-04-10T01:22:05.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p><strong>1. devtools</strong></p>
<p>spring为开发者提供了一个名为spring-boot-devtools的模块来使Spring Boot应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用。</p>
<p><strong>2. 项目搭建</strong></p>
<p>本文是采用IDEA搭建的Spring Boot应用，通过spring-boot-devtools配置，可以支持修改java文件会自动重启程序，一些资源无需触发重启，例如thymeleaf模板文件就可以实时编辑。默认情况下，更改/META-INF/maven，/META-INF/resources ，/resources ，/static ，/public 或/templates下的资源不会触发重启，而是触发livereload。devtools模块包含一个嵌入的livereload服务器，可以在资源变化时用来触发浏览器刷新。浏览器需要在livereload.com下载安装扩展。 例如Chrome浏览器在应用商店安装livereload插件后，在要自动刷新的页面点击对应的图标，启动应用后更新页面内容或者css等都会触发页面自动刷新。</p>
<!-- more -->
<p><strong>3. livereload</strong></p>
<p>livereload 通过引入的脚本livereload.js在 livereload 服务和浏览器之间建立了一个 WebSocket 连接。每当监测到文件的变动，livereload 服务就会向浏览器发送一个信号，浏览器收到信号后就刷新页面，实现了实时刷新的效果。每次启动时，需要点击对应的图标，如下图所示。</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190410092324.png" alt="" loading="lazy"></figure>
<p><strong>4. 项目代码配置</strong></p>
<ol>
<li>pom.xml配置文件</li>
</ol>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;
   &lt;optional&gt;true&lt;/optional&gt;
&lt;/dependency&gt;
&lt;plugin&gt;
   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
   &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
   &lt;configuration&gt;
      &lt;fork&gt;true&lt;/fork&gt; &lt;!-- 如果没有该配置，devtools不会生效 --&gt;
   &lt;/configuration&gt;
&lt;/plugin&gt;

</code></pre>
<ol start="2">
<li>yml配置</li>
</ol>
<pre><code class="language-yml">devtools:
  livereload:
    enabled: true #是否支持livereload
    port: 35729
  restart:
    enabled: true #是否支持热部署
    
</code></pre>
<ol start="5">
<li>
<p><strong>IDEA配置</strong></p>
</li>
<li>
<p>File-Settings-Compiler-Build project automatically<br>
<img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190410092511.png" alt="" loading="lazy"></p>
</li>
<li>
<p>ctrl + shift + alt + / MAC快捷键为shift + option + command + / ,选择Registry,勾上 Compiler autoMake allow when app running</p>
</li>
</ol>
<p><strong>6.安装livereload插件</strong><br>
下载livereload插件，将其安装到chrome扩展程序中，并选中允许访问文件网址。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190410092728.png" alt="" loading="lazy"></figure>
<p><strong>7.测试</strong></p>
<ol>
<li>修改类 应用会重启</li>
<li>修改配置文件 应用会重启</li>
<li>修改静态文件（html、css等），应用不会重启，但是会调用livereload，浏览器会自动刷新，显示最新的修改内容。</li>
</ol>
<hr>
<p><strong>参考资料：</strong></p>
<p><a href="https://www.cnblogs.com/TechSnail/p/7690829.html">spring boot 热部署devtools实现</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[zsh: command not found: 解决方法]]></title>
        <id>https://marsleoguo.github.io/post/zsh-command-not-found-解决方法/</id>
        <link href="https://marsleoguo.github.io/post/zsh-command-not-found-解决方法/">
        </link>
        <updated>2019-04-09T05:55:08.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>
<p>命令行执行：</p>
<pre><code>open open ~/.zshrc
</code></pre>
</li>
<li>
<p>找到 <code># User configuration</code><br>
加入</p>
<pre><code>source ~/.bash_profile
</code></pre>
</li>
<li>
<p>执行</p>
<pre><code>source .zshrc
</code></pre>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ELK 安装及错误问题]]></title>
        <id>https://marsleoguo.github.io/post/ELK安装及错误问题/</id>
        <link href="https://marsleoguo.github.io/post/ELK安装及错误问题/">
        </link>
        <updated>2019-04-09T05:28:47.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="安装es">安装ES</h2>
<p>ELK是有Elastic公司的三个组件配合进行日志收集，分别是：</p>
<ul>
<li>ElasticSearch:用于存储日志信息。</li>
<li>Logstash:用于收集、处理和转发日志信息。</li>
<li>Kibana:提供可搜索的Web可视化界面。</li>
</ul>
<p>当然，现在很多都配合着Beats进行使用，这里不做过多描述，感兴趣的可以查看官网，<a href="https://www.elastic.co/cn/products/beats">https://www.elastic.co/cn/products/beats</a>，这里有很多对Beats的描述。</p>
<h3 id="安装es-2">安装ES</h3>
<ol>
<li>
<p>从官网下载<a href="https://www.elastic.co/cn/products/elasticsearch">elasticsearch</a></p>
</li>
<li>
<p>将压缩包解压到适当位置</p>
</li>
<li>
<p>通过终端进入到文件夹内</p>
</li>
<li>
<p>修改elasticsearch的配置文件，文件路径在<code>elasticsearch-6.7.1/config/elasticsearch.yml</code>,在文件末端追加：</p>
<pre><code class="language-yml"># 去掉指定的ip地址
network.host: 0.0.0.0
</code></pre>
</li>
<li>
<p>启动ES：命令行输入命令如下：</p>
<pre><code class="language-shell">1. cd bin/
2. ./elasticsearch //前台运行 或者 nohub ./elasticsearch &amp; //后台运行
</code></pre>
</li>
<li>
<p>验证是否安装成功：</p>
</li>
</ol>
<p>浏览器输入：<a href="http://localhost:9200/">http://localhost:9200/</a></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190410135506.png" alt="" loading="lazy"></figure>
<!-- more -->
<h3 id="安装head">安装Head</h3>
<ol>
<li>
<p>安装 nodejs</p>
</li>
<li>
<p>安装grunt</p>
<ol>
<li><code>npm install -g grunt-cli</code></li>
<li>安装完成后执行： <code>grunt -version</code></li>
</ol>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190409141923.png" alt="" loading="lazy"></figure>
<ol start="3">
<li>
<p>配置运行</p>
<ol>
<li>
<p>进入Elasticsearch安装目录下的config目录，修改elasticsearch.yml文件.在文件的末尾加入以下代码</p>
<pre><code class="language-yml"># 配置head
http.cors.enabled: true 
http.cors.allow-origin: &quot;*&quot;
node.master: true
node.data: true
</code></pre>
</li>
<li>
<p>重启ES</p>
</li>
<li>
<p>在https://github.com/mobz/elasticsearch-head中下载head插件，选择下载zip</p>
</li>
<li>
<p>解压到指定文件夹下,进入该文件夹，修改<code>Gruntfile.js</code> 在对应的位置加上<code>hostname:'*'</code></p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190409142157.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>执行<code>npm install</code> 安装<br>
，完成后执行<code>grunt server</code> 或者<code>npm run start</code>运行head插件，如果运行不成功建议重新安装grunt。成功如下</p>
<p>登录地址：http://127.0.0.1:9100</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190409142248.png" alt="" loading="lazy"></figure>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="安装kibana">安装Kibana</h2>
<ol>
<li>
<p>安装JDK8以上版本。</p>
</li>
<li>
<p>下载<a href="https://www.elastic.co/cn/products/kibana">kibana</a>，注意版本一定要与ES一致。</p>
</li>
<li>
<p>解压kibana到指定文件夹</p>
</li>
<li>
<p>修改<code>config/kibana.yml</code>配置文件</p>
<pre><code class="language-yml"># 允许远程访问
server.host: &quot;0.0.0.0&quot;
# es主机地址
elasticsearch.hosts: [&quot;http://ip:9200&quot;]

</code></pre>
<p>kibana常见配置项：</p>
<pre><code class="language-yml"># pingElasticsearch超时时间
elasticsearch.pingTimeout
# 读取Elasticsearch数据超时时间
elasticsearch.requestTimeout  
#Elasticsearch主机地址
elasticsearch.url: &quot;http://ip:9200&quot; 
# 允许远程访问
server.host: &quot;0.0.0.0&quot; 
# Elasticsearch用户名 这里其实就是我在服务器启动Elasticsearch的用户名
elasticsearch.username: &quot;es&quot;  
# Elasticsearch鉴权密码 这里其实就是我在服务器启动Elasticsearch的密码
elasticsearch.password: &quot;es&quot;  
</code></pre>
</li>
<li>
<p>直接启动，进入bin目录</p>
<pre><code class="language-shell">./kibana
</code></pre>
<p>后台启动，进入bin目录</p>
<pre><code class="language-shell">nohup ./kibana &amp;
</code></pre>
</li>
<li>
<p>访问http://ip:5601</p>
</li>
</ol>
<h2 id="汉化kibana">汉化kibana</h2>
<ol>
<li>下载汉化文件：<a href="https://github.com/anbai-inc/Kibana_Hanization/">https://github.com/anbai-inc/Kibana_Hanization/</a></li>
<li>参考github中的项目介绍进行汉化。</li>
</ol>
<h2 id="安装logstash">安装logstash</h2>
<ol>
<li>
<p>下载<a href="https://www.elastic.co/cn/products/logstash">logstash</a>,注意版本要与es一致</p>
</li>
<li>
<p>解压文件到指定位置</p>
</li>
<li>
<p>测试logstash</p>
<ol>
<li>
<p>进入logstash目录</p>
</li>
<li>
<p>简单输出到控制台</p>
<pre><code class="language-shell">bin/logstash -e 'input { stdin { } } output { stdout {} }'
</code></pre>
</li>
</ol>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190410141430.png" alt="" loading="lazy"></figure>
<ol start="3">
<li>
<p>日志文件输出到ES中</p>
</li>
<li>
<p>在logstash文件夹中创建文件，logstash.conf</p>
</li>
<li>
<p>在logstash.conf中输入es的相关信息：</p>
</li>
</ol>
<pre><code>```yml
input {
  tcp {
    mode =&gt; &quot;server&quot;
    host =&gt; &quot;0.0.0.0&quot;
    port =&gt; 4560
    codec =&gt; json_lines
  }
}
output {
  elasticsearch {
    hosts =&gt; &quot;localhost:9200&quot;
    index =&gt; &quot;springboot-logstash-%{+YYYY.MM.dd}&quot;
  }
}
```
</code></pre>
<ol start="3">
<li>
<p>启动logstash</p>
<pre><code class="language-shell">bin/logstash -f logstash.conf
</code></pre>
</li>
</ol>
</li>
</ol>
<h2 id="springboot集成logstash">springboot集成logstash</h2>
<ol>
<li>
<p>在项目中添加logstash-logback-encoder依赖</p>
<pre><code class="language-xml">		&lt;dependency&gt;
			&lt;groupId&gt;net.logstash.logback&lt;/groupId&gt;
			&lt;artifactId&gt;logstash-logback-encoder&lt;/artifactId&gt;
			&lt;version&gt;5.3&lt;/version&gt;
		&lt;/dependency&gt;
</code></pre>
</li>
<li>
<p>配置logback日志</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;configuration&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/base.xml&quot; /&gt;

    &lt;appender name=&quot;LOGSTASH&quot; class=&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;&gt;
        &lt;destination&gt;127.0.0.1:4560&lt;/destination&gt;
        &lt;!-- 日志输出编码 --&gt;
        &lt;encoder charset=&quot;UTF-8&quot;
                 class=&quot;net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder&quot;&gt;
            &lt;providers&gt;
                &lt;timestamp&gt;
                    &lt;timeZone&gt;UTC&lt;/timeZone&gt;
                &lt;/timestamp&gt;
                &lt;pattern&gt;
                    &lt;pattern&gt;
                        {
                        &quot;logLevel&quot;: &quot;%level&quot;,
                        &quot;serviceName&quot;: &quot;${springAppName:-}&quot;,
                        &quot;pid&quot;: &quot;${PID:-}&quot;,
                        &quot;thread&quot;: &quot;%thread&quot;,
                        &quot;class&quot;: &quot;%logger{40}&quot;,
                        &quot;rest&quot;: &quot;%message&quot;
                        }
                    &lt;/pattern&gt;
                &lt;/pattern&gt;
            &lt;/providers&gt;
        &lt;/encoder&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;LOGSTASH&quot; /&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
    &lt;/root&gt;


&lt;/configuration&gt;
</code></pre>
</li>
<li>
<p>启动springboot项目</p>
</li>
<li>
<p>打开kibana管理页面，添加刚刚创建的索引<br>
<img src="https://raw.githubusercontent.com/marsleoguo/bed/master/20190410142919.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="6"><img src="/Users/wanghc/myblog/source/_posts/assets/image-20190410143122162.png" alt="" loading="lazy"></figure>
</li>
</ol>
<h2 id="定时删除过期的日志">定时删除过期的日志</h2>
<pre><code class="language-shell">#/bin/bash
#es-index-clear
#只保留15天内的日志索引
LAST_DATA=`date -d &quot;-15 days&quot; &quot;+%Y.%m.%d&quot;`
#删除上个月份所有的索引
curl -XDELETE 'http://ip:port/*-'${LAST_DATA}'*'
</code></pre>
<p>crontab -e添加定时任务：</p>
<pre><code class="language-shell">0 1 * * * /search/odin/elasticsearch/scripts/es-index-clear.sh
</code></pre>
<h2 id="问题">问题</h2>
<h3 id="error-cluster-name-elasticsearch_nathan-subdirectory-exists-in-data-paths">ERROR: Cluster name [elasticsearch_nathan] subdirectory exists in data paths]</h3>
<p>解决办法：删除路径中提到的路径：例如：删除<code>/usr/local/var/lib/elasticsearch</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ElasticSearch监控工具 - cerebro]]></title>
        <id>https://marsleoguo.github.io/post/ElasticSearch监控工具-cerebro/</id>
        <link href="https://marsleoguo.github.io/post/ElasticSearch监控工具-cerebro/">
        </link>
        <updated>2019-03-31T12:06:19.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="elasticsearch监控工具-cerebro">ElasticSearch监控工具 - cerebro</h1>
<blockquote>
<p>最近ElasticSearch使用中出现好多异常情况，一直都是命令行直接排查问题，不够直观。网络上大部分都推荐<code>Kopf</code>，<code>Bigdesk</code>，但是都已经是过时的工具，多年都没有更新了。</p>
</blockquote>
<p><em>ps: kopf的github首页就表明该项目不再维护，推荐使用cerebro；bigdesk也只支持ElasticSearch1.3及以下版本</em></p>
<p>而且<code>cerebro</code>的使用特别简单，页面还很漂亮！</p>
<figure data-type="image" tabindex="1"><img src="https://upload-images.jianshu.io/upload_images/7081994-56c0d7fbce479a05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img" loading="lazy"></figure>
<p>监控页面</p>
<h2 id="下载解压">下载解压</h2>
<p><a href="https://github.com/lmenezes/cerebro/releases">https://github.com/lmenezes/cerebro/releases</a></p>
<pre><code>wget https://github.com/lmenezes/cerebro/releases/download/v0.8.1/cerebro-0.8.1.tgz
tar xzf cerebro-0.8.1.tgz
</code></pre>
<h2 id="启动">启动</h2>
<pre><code>cerebro-0.8.1/bin/cerebro
[info] play.api.Play - Application started (Prod)
[info] p.c.s.AkkaHttpServer - Listening for HTTP on /0:0:0:0:0:0:0:0:9000
</code></pre>
<ul>
<li>指定端口</li>
</ul>
<pre><code>bin/cerebro -Dhttp.port=8080
</code></pre>
<ul>
<li>配置服务器</li>
</ul>
<p>非必须：如果经常使用的话，可以先在<code>conf/application.conf</code>中配置好ElasticSearch服务器地址</p>
<pre><code>hosts = [
  {
    host = &quot;http://localhost:9200&quot;
    name = &quot;Some Cluster&quot;
  },
  # Example of host with authentication
  #{
  #  host = &quot;http://some-authenticated-host:9200&quot;
  #  name = &quot;Secured Cluster&quot;
  #  auth = {
  #    username = &quot;username&quot;
  #    password = &quot;secret-password&quot;
  #  }
  #}
]
</code></pre>
<h2 id="使用">使用</h2>
<ul>
<li>浏览器打开连接<a href="http://192.168.58.101:9000/">http://192.168.58.101:9000</a></li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://upload-images.jianshu.io/upload_images/7081994-efb0af233f90c9c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/516/format/webp" alt="img" loading="lazy"></figure>
<p>预配置好的Some Cluster</p>
<p>连接后可以显示集群信息：</p>
<ul>
<li>
<p>概要信息</p>
<figure data-type="image" tabindex="3"><img src="https://upload-images.jianshu.io/upload_images/7081994-56c0d7fbce479a05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img" loading="lazy"></figure>
<p>监控页面</p>
</li>
<li>
<p>节点信息</p>
<figure data-type="image" tabindex="4"><img src="https://upload-images.jianshu.io/upload_images/7081994-f57e890e3b90c00e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img" loading="lazy"></figure>
<p>节点信息</p>
</li>
<li>
<p>Rest接口</p>
<figure data-type="image" tabindex="5"><img src="https://upload-images.jianshu.io/upload_images/7081994-e8c1848716513154.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img" loading="lazy"></figure>
<p>Rest接口</p>
</li>
<li>
<p>其他功能</p>
<figure data-type="image" tabindex="6"><img src="https://upload-images.jianshu.io/upload_images/7081994-ec5b2807bda52075.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp" alt="img" loading="lazy"></figure>
<p>其他状态查询</p>
</li>
</ul>
<h2 id="elasticsearch系列">ElasticSearch系列</h2>
<ul>
<li><a href="https://www.jianshu.com/p/c6708ea88710">ElasticSearch常用命令</a></li>
</ul>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://github.com/lmenezes/cerebro/releases">https://github.com/lmenezes/cerebro/releases</a></li>
<li><a href="https://github.com/lmenezes/elasticsearch-kopf">https://github.com/lmenezes/elasticsearch-kopf</a></li>
<li><a href="https://github.com/lukas-vlcek/bigdesk">https://github.com/lukas-vlcek/bigdesk</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iOS 开发工具集合]]></title>
        <id>https://marsleoguo.github.io/post/iOS-开发工具集合/</id>
        <link href="https://marsleoguo.github.io/post/iOS-开发工具集合/">
        </link>
        <updated>2019-03-31T11:21:40.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="ios开发工具集合">iOS开发工具集合</h1>
<h2 id="工具">工具</h2>
<ul>
<li><a href="https://link.jianshu.com?t=https://github.com/Nonchalant/AppIcon">Nonchalant/AppIcon</a> - Icon图标自动化生成工具</li>
<li><a href="https://link.jianshu.com?t=https://github.com/tinymind/LSUnusedResources">tinymind/LSUnusedResources</a> - 查找iOS中未使用的资源</li>
<li><a href="https://link.jianshu.com?t=https://github.com/netyouli/WHC_ScanUnreferenceImageTool">netyouli/WHC_ScanUnreferenceImageTool</a> - 扫描项目里没有使用的图片工具</li>
<li><a href="https://link.jianshu.com?t=https://github.com/netyouli/WHC_DataModelFactory">netyouli/WHC_DataModelFactory</a> - 快速把json/xml数据转换生成对应模型类属性</li>
<li><a href="https://link.jianshu.com?t=https://github.com/metasmile/strsync">metasmile/strsync</a> - 自动翻译并且使 .strings 文件和默认语言同步</li>
<li><a href="https://link.jianshu.com?t=https://github.com/mac-cain13/R.swift">mac-cain13/R.swift</a> - 在Swift项目中，强类型的自动补全资源名称的工具，包括图片，单元格和segue的工具</li>
<li><a href="https://link.jianshu.com?t=https://github.com/SwiftGen/SwiftGen">SwiftGen/SwiftGen</a> - 生成Swift代码工具的集合（生成资源的枚举，storyboard，本地化字符串和 UIColor）</li>
</ul>
<h2 id="文件">文件</h2>
<ul>
<li><a href="https://link.jianshu.com?t=https://github.com/answer-huang/dSYMTools">answer-huang/dSYMTools</a> - dSYM 文件分析工具</li>
<li><a href="https://link.jianshu.com?t=https://github.com/shaojiankui/ProfilesManager">shaojiankui/ProfilesManager</a> - iOS/macOS 描述文件管理</li>
<li><a href="https://link.jianshu.com?t=https://simpholders.com/">SimPholders2</a> - 查看模拟器沙盒文件夹下的文件 (收费)</li>
<li><a href="https://link.jianshu.com?t=https://github.com/hyperoslo/Simulator">hyperoslo/Simulator</a> - 访问模拟器沙盒文件 (开源)</li>
</ul>
<h2 id="测试">测试</h2>
<ul>
<li><a href="https://link.jianshu.com?t=https://github.com/facebook/FBSimulatorControl">facebook/FBSimulatorControl</a> - 模拟器适配测试，模拟器多开框架。</li>
<li><a href="https://link.jianshu.com?t=https://github.com/facebook/ios-snapshot-test-case">facebook/ios-snapshot-test-case</a> - IOS的快照视图单元测试</li>
<li><a href="https://link.jianshu.com?t=https://github.com/Palleas/NaughtyKeyboard">Palleas/NaughtyKeyboard</a> - 危险字符串的大列表,测试iOS键盘</li>
<li><a href="https://link.jianshu.com?t=https://github.com/johnno1962/Remote">johnno1962/Remote</a> - Xcode 内部控制你的 iPhone 来做端到端的测试</li>
<li><a href="https://link.jianshu.com?t=https://github.com/inkling/Subliminal">inkling/Subliminal</a> - iOS集成测试框架</li>
<li><a href="https://link.jianshu.com?t=https://github.com/square/PonyDebugger">square/PonyDebugger</a> - 使用Chrome开发者工具对iOS进行远程网络和数据调试</li>
<li><a href="https://link.jianshu.com?t=https://github.com/Zepo/MLeaksFinder">Zepo/MLeaksFinder</a> - 自动化内存泄漏测试框架</li>
</ul>
<h2 id="调试">调试</h2>
<ul>
<li><a href="https://link.jianshu.com?t=https://revealapp.com/">reveal</a> - iOS UI调试工具</li>
<li><a href="https://link.jianshu.com?t=https://www.charlesproxy.com/">charles</a> - iOS 网络调试工具</li>
<li><a href="https://link.jianshu.com?t=https://github.com/Flipboard/FLEX">Flipboard/FLEX</a> - 嵌入APP内部的调试工具</li>
<li><a href="https://link.jianshu.com?t=https://github.com/facebook/chisel">facebook/chisel</a> - LLDB 调试增强工具</li>
<li><a href="https://link.jianshu.com?t=https://github.com/zixun/GodEye">zixun/GodEye</a> - iOS调试工具集合</li>
</ul>
<h2 id="部署">部署</h2>
<ul>
<li><a href="https://link.jianshu.com?t=https://github.com/fastlane/fastlane">fastlane/fastlane</a> - 将所有 iOS 部署工具整合到一个工作流中</li>
</ul>
<p>GitHub地址：<a href="https://link.jianshu.com?t=https://github.com/wedxz/Awesome-iOS-DevelopmentTools">https://github.com/wedxz/Awesome-iOS-DevelopmentTools</a></p>
<p>作者：vvusu_w</p>
<p>链接：https://www.jianshu.com/p/ed3560d1b1d3</p>
<p>来源：简书</p>
<p>简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[目前有哪些大公司在应用Go语言？]]></title>
        <id>https://marsleoguo.github.io/post/目前有哪些大公司在应用Go语言？/</id>
        <link href="https://marsleoguo.github.io/post/目前有哪些大公司在应用Go语言？/">
        </link>
        <updated>2019-03-31T11:21:40.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>Go语言是谷歌推出的一种的编程语言，可以在不损失应用程序性能的情况下降低代码的复杂性。谷歌首席软件工程师罗布派克(Rob Pike)说：我们之所以开发Go，是因为过去10多年间软件开发的难度令人沮丧。派克表示，和今天的C++或C一样，Go是一种系统语言。他解释道，&quot;使用它可以进行快速开发，同时它还是一个真正的编译语言，我们之所以现在将其开源，原因是我们认为它已经非常有用和强大。&quot;</p>
<p>目前应用Go语言的大公司有：</p>
<p><strong>1、Google</strong></p>
<p>这个不用多做介绍，作为开发Go语言的公司，当仁不让。Google基于Go有很多优秀的项目，比如：https://github.com/kubernetes/kubernetes ，大家也可以在Github上 https://github.com/google/ 查看更多Google的Go开源项目。</p>
<p><strong>2、Facebook</strong></p>
<p>Facebook也在用，为此他们还专门在Github上建立了一个开源组织facebookgo，大家可以通过https://github.com/facebookgo访问查看facebook开源的项目，比如著名的是平滑升级的grace。</p>
<p><strong>3、腾讯</strong></p>
<p>腾讯作为国内的大公司，还是敢于尝试的，尤其是Docker容器化这一块，他们在15年已经做了docker万台规模的实践，具体可以参考http://www.infoq.com/cn/articles/tencent-millions-scale-docker-application-practice 。</p>
<p>主要职责是：</p>
<p>负责腾讯游戏蓝鲸平台后台开发工作</p>
<p>负责容器相关的开发工作</p>
<p>和蓝鲸平台，容器开发有关。腾讯作为主要使用C/C++的公司，使用Go会方便很多，也有很多优势，不过日积月累的C/C++代码很难改造，也不敢动，所以新业务会在Go方面尝试。</p>
<p><strong>4、百度</strong></p>
<p>目前所知的百度的使用是在运维这边，是百度运维的一个BFE项目，负责前端流量的接入。他们的负责人在2016年有分享，大家可以看下这个 http://www.infoq.com/cn/presentations/application-of-golang-in-baidu-frontend .</p>
<p>其次就是百度的消息系统，从其最近的Golang招聘介绍就可以看出来.</p>
<p>负责公司手百消息通讯系统服务器端开发及维护</p>
<p><strong>5、京东</strong></p>
<p>京东云消息推送系统、云存储，以及京东商城等都有使用Go做开发。</p>
<p><strong>6、小米</strong></p>
<p>小米对Golang的支持，莫过于运维监控系统的开源，也就是 http://open-falcon.com/ 。</p>
<p>此外，小米互娱、小米商城、小米视频、小米生态链等团队都在使用Golang。</p>
<p><strong>7、360</strong></p>
<p>360对Golang的使用也不少，一个是开源的日志搜索系统Poseidon，托管在Github上，https://github.com/Qihoo360/poseidon.</p>
<p>还有360的推送团队也在使用，他们还写了篇博文在Golang的官方博客上 https://blog.golang.org/qihoo。</p>
<p>360直播在招聘Golang开发工程师。</p>
<p>美团、滴滴、新浪以及七牛等。一般的选择，都是选择用于自己公司合适的产品系统来做，比如消息推送的、监控的、容器的等，Golang特别适合做网络并发的服务，这是他的强项，所以也是被优先用于这些项目。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ios开发资料整理]]></title>
        <id>https://marsleoguo.github.io/post/ios开发资料整理/</id>
        <link href="https://marsleoguo.github.io/post/ios开发资料整理/">
        </link>
        <updated>2019-03-28T04:52:01.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h2 id="设计类">设计类</h2>
<ol>
<li><a href="https://www.jianshu.com/p/a496d878f47a">2018年不可错过的19款Sketch线框图套件</a></li>
<li><a href="https://www.jianshu.com/p/2c779b1d1102">在ios开发路上查阅的资料</a></li>
<li><a href="https://www.jianshu.com/p/462bd5b28656">各个经典</a></li>
<li><a href="https://www.tuicool.com/articles/YFbmqe6">常用的第三方库整理收集</a></li>
<li></li>
</ol>
]]></content>
    </entry>
</feed>